# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nRiNkqtLFa8PR5T1Dl0VrSMa5K7B5krB
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the dataset
from google.colab import drive

drive.mount('/content/drive')


df=pd.read_csv("/content/drive/MyDrive/healthcare-dataset-stroke-data.csv")

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

df.head()

df.columns = df.columns.str.lower().str.replace('&', '_').str.replace(' ', '_')

df.shape

print (f' We have {df.shape[0]} instances with the {df.shape[1]-1} features and 1 target variable.')

df.info()

df.describe().T

df.describe(include=object).T

df.nunique()

df.drop('id', axis=1, inplace=True)

df.head()

missing_values = df.isnull().sum()

df = df.fillna(df.mean())



print("Missing Values:")
print(missing_values)

df = df.fillna(df.mean())

missing_values = df.isnull().sum()

print("Missing Values:")
print(missing_values)

duplicate_count = df.duplicated().sum()

duplicate_count

X = df[['age', 'avg_glucose_level', 'bmi']]
y = df['stroke']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

def euclidean_distance(point1, point2):
    return np.sqrt(np.sum((point1 - point2) ** 2))

def knn_predict(train_data, train_labels, test_data, k):
    predictions = []
    for test_point in test_data.values:
        distances = [euclidean_distance(test_point, train_point) for train_point in train_data.values]
        k_indices = np.argsort(distances)[:k]
        k_nearest_labels = [train_labels.iloc[i] for i in k_indices]

        prediction = max(set(k_nearest_labels), key=k_nearest_labels.count)
        predictions.append(prediction)

    return predictions

predictions = knn_predict(X_train, y_train, X_test, k=3)
accuracy = accuracy_score(y_test, predictions)
print(f'Accuracy: {accuracy:.2f}')
print(accuracy*100)

predictions = knn_predict(X_train, y_train, X_test, k=5)
accuracy = accuracy_score(y_test, predictions)
print(f'Accuracy: {accuracy:.2f}')
print(accuracy*100)

predictions = knn_predict(X_train, y_train, X_test, k=7)
accuracy = accuracy_score(y_test, predictions)
print(f'Accuracy: {accuracy:.2f}')
print(accuracy*100)

def plot_3d_scatter(ax, X, y_true, y_pred):
    ax.scatter(X[:, 0], X[:, 1], X[:, 2], c=y_true, marker='o', edgecolors='k', label='True Class')
    ax.scatter(X[:, 0], X[:, 1], X[:, 2], c=y_pred, marker='x', s=100, label='Predicted Class')
    ax.set_xlabel('Age')
    ax.set_ylabel('Average Glucose Level')
    ax.set_zlabel('BMI')
    ax.legend()

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

X_test_np = X_test.to_numpy()

plot_3d_scatter(ax, X_test_np, y_test, predictions)

plt.title("KNN Classification Results (k=3)")
plt.show()

def manhattan_distance(point1, point2):
    return np.sum(np.abs(point1 - point2))

def knn_predict_manhattan(train_data, train_labels, test_data, k):
    predictions = []
    for test_point in test_data.values:
        distances = [manhattan_distance(test_point, train_point) for train_point in train_data.values]
        k_indices = np.argsort(distances)[:k]
        k_nearest_labels = [train_labels.iloc[i] for i in k_indices]

        prediction = max(set(k_nearest_labels), key=k_nearest_labels.count)
        predictions.append(prediction)

    return predictions

predictions_manhattan = knn_predict_manhattan(X_train, y_train, X_test, k=3)

accuracy_manhattan = accuracy_score(y_test, predictions_manhattan)
print(f'Accuracy (Manhattan): {accuracy_manhattan:.2f}')
print(f'For k = 3 , Accuracy is : {accuracy_manhattan*100}')

predictions_manhattan = knn_predict_manhattan(X_train, y_train, X_test, k=5)

accuracy_manhattan = accuracy_score(y_test, predictions_manhattan)
print(f'Accuracy (Manhattan): {accuracy_manhattan:.2f}')
print(f'For k = 5 , Accuracy is : {accuracy_manhattan*100}')


predictions_manhattan = knn_predict_manhattan(X_train, y_train, X_test, k=7)

accuracy_manhattan = accuracy_score(y_test, predictions_manhattan)
print(f'Accuracy (Manhattan): {accuracy_manhattan:.2f}')
print(f'For k = 7 , Accuracy is : {accuracy_manhattan*100}')

